
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'PLUS MINUS TIMES DIVIDE EQUALS GREATER LESS NOTEQUAL LEFTPAREN RIGHTPAREN LEFTBRACKET RIGHTBRACKET SEMICOLON COMMA COLON CTEI CTEF ID CTESTRING INT FLOAT ELSE VAR PROGRAM PRINT IFprogram : PROGRAM ID SEMICOLON programVars bloqueprogramVars : vars\n                   | emptybloque : LEFTBRACKET estatutoBloque RIGHTBRACKETestatutoBloque : estatuto estatutoBloque\n                      | emptyvars : VAR varId COLON tipo SEMICOLON avarId : ID varsIdvarsId : COMMA ID varsId\n              | emptya : varId COLON tipo SEMICOLON a\n         | emptytipo : INT\n            | FLOATestatuto : asignacion\n                | condicion\n                | escritura asignacion : ID EQUALS expresion SEMICOLONexpresion : exp comparisoncomparison : GREATER comparisonExp\n                  | LESS comparisonExp\n                  | NOTEQUAL comparisonExp\n                  | emptycomparisonExp : expescritura : PRINT LEFTPAREN toprint RIGHTPAREN SEMICOLONtoprint : expresion toprintExp\n               | CTESTRING toprintExptoprintExp : COMMA  toprint\n                  | emptyexp : termino operatoroperator : PLUS termino operator\n            | MINUS termino operator\n            | emptytermino : factor termOperatortermOperator : TIMES factor termOperator\n                    | DIVIDE factor termOperator\n                    | emptycondicion : IF LEFTPAREN expresion RIGHTPAREN bloque elseCondition SEMICOLONelseCondition : ELSE bloque\n                     | emptyvarcte : ID\n              | CTEI\n              | CTEFfactor : LEFTPAREN expresion RIGHTPAREN\n              | sign varctesign : PLUS\n            | MINUS\n            | emptyempty :'
    
_lr_action_items = {'NOTEQUAL':([39,40,41,55,56,57,58,59,61,68,71,79,80,81,86,87,91,92,93,94,],[-49,66,-49,-41,-42,-43,-45,-30,-33,-34,-37,-44,-49,-49,-49,-49,-31,-32,-35,-36,]),'CTESTRING':([28,51,],[36,36,]),'LESS':([39,40,41,55,56,57,58,59,61,68,71,79,80,81,86,87,91,92,93,94,],[-49,65,-49,-41,-42,-43,-45,-30,-33,-34,-37,-44,-49,-49,-49,-49,-31,-32,-35,-36,]),'PROGRAM':([0,],[2,]),'RIGHTPAREN':([35,36,39,40,41,43,46,50,52,53,54,55,56,57,58,59,61,63,67,68,71,78,79,80,81,82,83,84,85,86,87,91,92,93,94,],[-49,-49,-49,-49,-49,72,73,-26,-29,-27,79,-41,-42,-43,-45,-30,-33,-19,-23,-34,-37,-28,-44,-49,-49,-20,-24,-21,-22,-49,-49,-31,-32,-35,-36,]),'PRINT':([9,14,15,16,21,74,88,99,],[17,-15,17,-16,-17,-18,-25,-38,]),'MINUS':([28,29,30,37,39,41,51,55,56,57,58,60,62,64,65,66,68,69,70,71,79,80,81,86,87,93,94,],[44,44,44,44,62,-49,44,-41,-42,-43,-45,44,44,44,44,44,-34,44,44,-37,-44,62,62,-49,-49,-35,-36,]),'COMMA':([12,34,35,36,39,40,41,55,56,57,58,59,61,63,67,68,71,79,80,81,82,83,84,85,86,87,91,92,93,94,],[23,23,51,51,-49,-49,-49,-41,-42,-43,-45,-30,-33,-19,-23,-34,-37,-44,-49,-49,-20,-24,-21,-22,-49,-49,-31,-32,-35,-36,]),'SEMICOLON':([3,26,31,32,33,39,40,41,47,55,56,57,58,59,61,63,67,68,71,72,79,80,81,82,83,84,85,86,87,89,91,92,93,94,95,97,98,100,],[4,-4,48,-13,-14,-49,-49,-49,74,-41,-42,-43,-45,-30,-33,-19,-23,-34,-37,88,-44,-49,-49,-20,-24,-21,-22,-49,-49,-49,-31,-32,-35,-36,99,-40,101,-39,]),'PLUS':([28,29,30,37,39,41,51,55,56,57,58,60,62,64,65,66,68,69,70,71,79,80,81,86,87,93,94,],[42,42,42,42,60,-49,42,-41,-42,-43,-45,42,42,42,42,42,-34,42,42,-37,-44,60,60,-49,-49,-35,-36,]),'LEFTBRACKET':([4,5,6,8,48,73,75,77,96,101,102,],[-49,-2,9,-3,-49,9,-7,-12,9,-49,-11,]),'COLON':([11,12,24,25,34,49,76,],[22,-49,-10,-8,-49,-9,90,]),'$end':([1,10,26,],[0,-1,-4,]),'RIGHTBRACKET':([9,13,14,15,16,20,21,27,74,88,99,],[-49,26,-15,-49,-16,-6,-17,-5,-18,-25,-38,]),'DIVIDE':([41,55,56,57,58,79,86,87,],[70,-41,-42,-43,-45,-44,70,70,]),'LEFTPAREN':([17,18,28,29,30,37,51,60,62,64,65,66,69,70,],[28,29,37,37,37,37,37,37,37,37,37,37,37,37,]),'EQUALS':([19,],[30,]),'ELSE':([26,89,],[-4,96,]),'VAR':([4,],[7,]),'TIMES':([41,55,56,57,58,79,86,87,],[69,-41,-42,-43,-45,-44,69,69,]),'ID':([2,7,9,14,15,16,21,23,28,29,30,37,38,42,44,45,48,51,60,62,64,65,66,69,70,74,88,99,101,],[3,12,19,-15,19,-16,-17,34,-49,-49,-49,-49,55,-46,-47,-48,12,-49,-49,-49,-49,-49,-49,-49,-49,-18,-25,-38,12,]),'IF':([9,14,15,16,21,74,88,99,],[18,-15,18,-16,-17,-18,-25,-38,]),'GREATER':([39,40,41,55,56,57,58,59,61,68,71,79,80,81,86,87,91,92,93,94,],[-49,64,-49,-41,-42,-43,-45,-30,-33,-34,-37,-44,-49,-49,-49,-49,-31,-32,-35,-36,]),'INT':([22,90,],[32,32,]),'FLOAT':([22,90,],[33,33,]),'CTEF':([28,29,30,37,38,42,44,45,51,60,62,64,65,66,69,70,],[-49,-49,-49,-49,57,-46,-47,-48,-49,-49,-49,-49,-49,-49,-49,-49,]),'CTEI':([28,29,30,37,38,42,44,45,51,60,62,64,65,66,69,70,],[-49,-49,-49,-49,56,-46,-47,-48,-49,-49,-49,-49,-49,-49,-49,-49,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'vars':([4,],[5,]),'elseCondition':([89,],[95,]),'sign':([28,29,30,37,51,60,62,64,65,66,69,70,],[38,38,38,38,38,38,38,38,38,38,38,38,]),'programVars':([4,],[6,]),'operator':([39,80,81,],[59,91,92,]),'bloque':([6,73,96,],[10,89,100,]),'termOperator':([41,86,87,],[68,93,94,]),'estatutoBloque':([9,15,],[13,27,]),'toprintExp':([35,36,],[50,53,]),'varcte':([38,],[58,]),'tipo':([22,90,],[31,98,]),'estatuto':([9,15,],[15,15,]),'program':([0,],[1,]),'factor':([28,29,30,37,51,60,62,64,65,66,69,70,],[41,41,41,41,41,41,41,41,41,41,86,87,]),'empty':([4,9,12,15,28,29,30,34,35,36,37,39,40,41,48,51,60,62,64,65,66,69,70,80,81,86,87,89,101,],[8,20,24,20,45,45,45,24,52,52,45,61,67,71,77,45,45,45,45,45,45,45,45,61,61,71,71,97,77,]),'a':([48,101,],[75,102,]),'comparisonExp':([64,65,66,],[82,84,85,]),'varId':([7,48,101,],[11,76,76,]),'varsId':([12,34,],[25,49,]),'condicion':([9,15,],[16,16,]),'toprint':([28,51,],[43,78,]),'expresion':([28,29,30,37,51,],[35,46,47,54,35,]),'comparison':([40,],[63,]),'asignacion':([9,15,],[14,14,]),'exp':([28,29,30,37,51,64,65,66,],[40,40,40,40,40,83,83,83,]),'escritura':([9,15,],[21,21,]),'termino':([28,29,30,37,51,60,62,64,65,66,],[39,39,39,39,39,80,81,39,39,39,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON programVars bloque','program',5,'p_program','LittleDuckParser.py',5),
  ('programVars -> vars','programVars',1,'p_programVars','LittleDuckParser.py',9),
  ('programVars -> empty','programVars',1,'p_programVars','LittleDuckParser.py',10),
  ('bloque -> LEFTBRACKET estatutoBloque RIGHTBRACKET','bloque',3,'p_bloque','LittleDuckParser.py',13),
  ('estatutoBloque -> estatuto estatutoBloque','estatutoBloque',2,'p_estatutoBloque','LittleDuckParser.py',16),
  ('estatutoBloque -> empty','estatutoBloque',1,'p_estatutoBloque','LittleDuckParser.py',17),
  ('vars -> VAR varId COLON tipo SEMICOLON a','vars',6,'p_vars','LittleDuckParser.py',20),
  ('varId -> ID varsId','varId',2,'p_varId','LittleDuckParser.py',23),
  ('varsId -> COMMA ID varsId','varsId',3,'p_varsId','LittleDuckParser.py',26),
  ('varsId -> empty','varsId',1,'p_varsId','LittleDuckParser.py',27),
  ('a -> varId COLON tipo SEMICOLON a','a',5,'p_a','LittleDuckParser.py',30),
  ('a -> empty','a',1,'p_a','LittleDuckParser.py',31),
  ('tipo -> INT','tipo',1,'p_tipo','LittleDuckParser.py',34),
  ('tipo -> FLOAT','tipo',1,'p_tipo','LittleDuckParser.py',35),
  ('estatuto -> asignacion','estatuto',1,'p_estatuto','LittleDuckParser.py',38),
  ('estatuto -> condicion','estatuto',1,'p_estatuto','LittleDuckParser.py',39),
  ('estatuto -> escritura','estatuto',1,'p_estatuto','LittleDuckParser.py',40),
  ('asignacion -> ID EQUALS expresion SEMICOLON','asignacion',4,'p_asignacion','LittleDuckParser.py',43),
  ('expresion -> exp comparison','expresion',2,'p_expresion','LittleDuckParser.py',46),
  ('comparison -> GREATER comparisonExp','comparison',2,'p_comparison','LittleDuckParser.py',49),
  ('comparison -> LESS comparisonExp','comparison',2,'p_comparison','LittleDuckParser.py',50),
  ('comparison -> NOTEQUAL comparisonExp','comparison',2,'p_comparison','LittleDuckParser.py',51),
  ('comparison -> empty','comparison',1,'p_comparison','LittleDuckParser.py',52),
  ('comparisonExp -> exp','comparisonExp',1,'p_comparisonExp','LittleDuckParser.py',55),
  ('escritura -> PRINT LEFTPAREN toprint RIGHTPAREN SEMICOLON','escritura',5,'p_escritura','LittleDuckParser.py',58),
  ('toprint -> expresion toprintExp','toprint',2,'p_toprint','LittleDuckParser.py',61),
  ('toprint -> CTESTRING toprintExp','toprint',2,'p_toprint','LittleDuckParser.py',62),
  ('toprintExp -> COMMA toprint','toprintExp',2,'p_toprintExp','LittleDuckParser.py',65),
  ('toprintExp -> empty','toprintExp',1,'p_toprintExp','LittleDuckParser.py',66),
  ('exp -> termino operator','exp',2,'p_exp','LittleDuckParser.py',69),
  ('operator -> PLUS termino operator','operator',3,'p_operator','LittleDuckParser.py',72),
  ('operator -> MINUS termino operator','operator',3,'p_operator','LittleDuckParser.py',73),
  ('operator -> empty','operator',1,'p_operator','LittleDuckParser.py',74),
  ('termino -> factor termOperator','termino',2,'p_termino','LittleDuckParser.py',77),
  ('termOperator -> TIMES factor termOperator','termOperator',3,'p_termOperator','LittleDuckParser.py',80),
  ('termOperator -> DIVIDE factor termOperator','termOperator',3,'p_termOperator','LittleDuckParser.py',81),
  ('termOperator -> empty','termOperator',1,'p_termOperator','LittleDuckParser.py',82),
  ('condicion -> IF LEFTPAREN expresion RIGHTPAREN bloque elseCondition SEMICOLON','condicion',7,'p_condicion','LittleDuckParser.py',85),
  ('elseCondition -> ELSE bloque','elseCondition',2,'p_elseCondition','LittleDuckParser.py',88),
  ('elseCondition -> empty','elseCondition',1,'p_elseCondition','LittleDuckParser.py',89),
  ('varcte -> ID','varcte',1,'p_varcte','LittleDuckParser.py',92),
  ('varcte -> CTEI','varcte',1,'p_varcte','LittleDuckParser.py',93),
  ('varcte -> CTEF','varcte',1,'p_varcte','LittleDuckParser.py',94),
  ('factor -> LEFTPAREN expresion RIGHTPAREN','factor',3,'p_factor','LittleDuckParser.py',97),
  ('factor -> sign varcte','factor',2,'p_factor','LittleDuckParser.py',98),
  ('sign -> PLUS','sign',1,'p_sign','LittleDuckParser.py',101),
  ('sign -> MINUS','sign',1,'p_sign','LittleDuckParser.py',102),
  ('sign -> empty','sign',1,'p_sign','LittleDuckParser.py',103),
  ('empty -> <empty>','empty',0,'p_empty','LittleDuckParser.py',106),
]
